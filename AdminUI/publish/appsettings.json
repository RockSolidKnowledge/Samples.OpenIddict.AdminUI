{
  "AllowedHosts": "*",
  "CER_FULL_PATH": "./Data/gateway.cer",
  "Logging": {
    "LogLevel": {
      //      "Default": "Warning"
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AzureAppServiceLogging": false,
  "LoggingMinimumLevel": "Info",
  "EFLoggingMinimumLevel": "Warning",
  "DbProvider": "SqlServer",
  "IdentityConnectionString": "Server=RICHARD-LAPTOP\\SQLEXPRESS;User Id=IISConnect;Password=Password123!;Database=OpenIddictDb;Encrypt=False",
  "IdentityServerConnectionString": "Server=RICHARD-LAPTOP\\SQLEXPRESS;User Id=IISConnect;Password=Password123!;Database=OpenIddictDb;Encrypt=False", // Currently only required bc system checks it to be non-null 
  "OpenIddictConnectionString": "Server=RICHARD-LAPTOP\\SQLEXPRESS;User Id=IISConnect;Password=Password123!;Database=OpenIddictDb;Encrypt=False",
  "StoredProcedureSchemaPrefix": "dbo",
  "UiUrl": "https://localhost:5000",
  "AuthorityUrl": "https://localhost:5003",
  "AdminUIClientId": "admin_ui",
  "AdminUICustomScopeName": "admin_api",
  "AdminUIProfileCustomScopeName": "admin_ui_profile",
  "AdminUIClientSecret": "dev",
  "AdminUIJwtTypes": "All",
  "RequireHttpsMetadata": false,
  "LicenseKey": "eyJleHAiOiIyMDI0LTA5LTA2VDAwOjAwOjAwIiwiaWF0IjoiMjAyNC0wNi0wNlQxMzo0MToxOCIsImF1ZCI6MSwidHlwZSI6M30=.ecustYaBBX97x1Uyo2KyfDlrZvwx3Mj15BEJ/kp0NKdK0ABFB3T0c6vTWl7lH5IJovIJYDjAaiuW22y2qBopmZFbBUdvz0edVInuRM4D44lfa/etHqGZvRtMbyjxQ1CZhMBxBw/w1Pj8bcUyA46H9B3JcZMOrC4b3Vd5OWCMCxirjjp7iJtOXDC+Aqc2i+AKFxqy43/KM9AY17prxynfhqZnImVBGFM0xESBZafFxuWRyqcSvZYgIs4q1Y51MuRJgKGQwDIpyRjvProo/CDYMxPnAsxZNZrWGJEuyrqWOYF33zIbcjrp1Jp5qN7KYzg1ee/Mb1idegyu2j2fo/3PA3gmLfUvH2D86OukaVGg9vw+qosX8MPugNRBGFpduk/OC75schnXCJLHnqhoeqoFte8torv3U2TLGzkfHRzLd2FKHFztpoerX0oZrExt8pxa7PkdGYdHDd0Dk9VFk7+Qc8eR5YQr8cSZ9LOq1nZNTSN+i/XOG93oNvThNKk/WCTs8ofsqAVSltPRxmMj5I5eeK5aTt8bZbZzuPK9iu/N+9NAnQMmeGQ2GetzMjwIq8f0q1/WpTtUeJg1g5xlJ/sWWVD+cb9wu4ExYl+OtNL9DwzIdONX5Hu+p4spWfmit7mrDE2KGSbA40GlzZqrwv63NFiF5T/0IyE5wonWhzUeNNI=",

  "DisableBootstrap": false,
  "ServeUi": true,
  "PasswordPolicy": {
    "RequireDigit": true,
    "RequireLowercase": true,
    "RequireNonAlphanumeric": true,
    "RequireUppercase": true,
    "RequiredLength": 6,
    "RequiredUniqueChars": 1
  },
  "UsernamePolicy": {
    "AllowedUserNameCharacters": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+",
    "RequireUniqueEmail": false
  },
  "ReferenceTokens": {
    "UseReferenceTokens": false,
    "Secret": ""
  },
  "FeatureFlags": {
    "DefaultUserValidation": true,
    "AddUserPassword": false,
    "EnableEnforcerAuthorization": false,
    "EnableSharedScopes": false,
    "EnableSessionManagement": true
    //"EnableDynamicAuthentication": "Disabled"
  },
  //  "AuditRecordsConnectionString": "",
  //  "DataProtectionConnectionString": "",
  //  "OperationalConnectionString": "",
  //  "ConfigurationStoreSchemaName": "guest",   
  //  "OperationalStoreSchemaName": "guest",
  //  "WebhookClientId": "",
  //  "WebhookClientSecret": "",
  //  "PasswordResetEndpoint": "",
  //  "RegistrationConfirmationEndpoint": "",
  //  "ResetMFAEndpoint": "",
  "DataProtection": {
    //    "Persistence": {
    //      "Type": "Filesystem",
    //      "Location": ""
    //    },

    //    "Persistence": {
    //      "Type": "Database", 
    //      "DbProvider": "SqlServer", 
    //      "DataProtectionConnectionString": ""
    //    },

    //    "Protection": {
    //      "Type": "KeyVault",
    //      "KeyIdentifier": "",
    //      "ClientId": "",
    //      "Secret": ""
    //    }

    //    "Protection": {
    //      "Type": "Certificate",
    //      "CertificateType":  "Thumbprint", 
    //      "Thumbprint":  "" 
    //    }

    //    "Protection": {
    //      "Type": "Certificate",
    //      "CertificateType":  "File", 
    //      "Location":  "" 
    //      "Password":  "" 
    //    }
  },
  "CustomClaimTypes": [
    {
      "id": "12345678910",
      "Name": "playwright_test1",
      "DisplayName": "Playwright Test Claim",
      "Description": "Test custom claim"
    },
    {
      "id": "98765432101",
      //        "Type": "String",
      "Name": "playwright_test2",
      "DisplayName": "Playwright Test Claim",
      "Description": "Test custom claim"
    }
    //{
    //  "id": "87654321012",
    //  //        "Type": "String",
    //  "Name": "playwright_test2",
    //  "DisplayName": "Duplicate Playwright Test Claim",
    //  "Description": "Duplicate Test custom claim"
    //}
  ],
  "CustomAccessPolicies": [
    //{
    //  "Type": "birthdate",
    //  "Value": "19/02/1996",
    //  "Permission": "All"
    //},
    {
      "Type": "role", // Existing ClaimType
      "Value": "Role c4eba9df-e83c-4325-bda5-1b0a151d008e", // existing Role
      "Permission": "UserManagerReadOnly"
    },
    { // TODO : Check that this should actually fail if the Type is supposed to be an actual ClaimType then a specific intance (defined by the Value) cannot have different permissions!
      "Type": "role", // Existing ClaimType
      "Value": "Role c4eba9df-e83c-4325-bda5-1b0a151d008e", // existing Role
      "Permission": "All"
    },
    {
      // TODO : Check that this should actually fail if the Type is supposed to be an actual ClaimType and the Value the name of an instance of the Type. This currently gets created! 
      "Type": "<any-string>",
      "Value": "<any-string>",
      "Permission": "All"
    }
  ],
  "WebhookConfig": {
    "ClientId": "webhook-cli",
    "ClientSecret": "webhook-cli",
    "Webhooks": {
      "MfaReset": {
        "Url": "https://dosomething.com/mfa-reset",
        "Scopes": "scope-mfa"
      },
      "PasswordReset": {
        "Url": "https://dosomething.com/pass-reset",
        "Scopes": "scope-pres scope-b"
      },
      // This webhook will fire at the end of registering the bootstrapping user but before the default user, info@rocksolidknowledge.com, is deleted and the bottstrapped user is assigned the admin role.
      // For that to work we need real webhook details here (URL and scopes). The login button will only be activated after the endpoint executes successfully..
      // If we set it up with fake values, as we are doing here, the context will still be that of info@rock* and the login button will not be activated.
      // Because of that we will not configure it here
      //"UserRegistration": {
      //  "Url": "https://dosomething.com/usr-reg",
      //  "Scopes": "scope-ur"
      //},
      "ServerSideSessionDelete": {
        "Url": "https://dosomething.com/server-side-session",
        "Scopes": "scope-sss"
      }
    }
  }
}
